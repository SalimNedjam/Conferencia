[{"/home/dev/Downloads/Twister-master/client/src/index.js":"1","/home/dev/Downloads/Twister-master/client/src/serviceWorker.js":"2","/home/dev/Downloads/Twister-master/client/src/MainPage.js":"3","/home/dev/Downloads/Twister-master/client/src/Navigation.js":"4","/home/dev/Downloads/Twister-master/client/src/Accueil.js":"5","/home/dev/Downloads/Twister-master/client/src/Authentification.js":"6","/home/dev/Downloads/Twister-master/client/src/MyProfile.js":"7","/home/dev/Downloads/Twister-master/client/src/Forgot.js":"8","/home/dev/Downloads/Twister-master/client/src/Register.js":"9","/home/dev/Downloads/Twister-master/client/src/Success.js":"10","/home/dev/Downloads/Twister-master/client/src/ShowProfile.js":"11","/home/dev/Downloads/Twister-master/client/src/ChangePassword.js":"12","/home/dev/Downloads/Twister-master/client/src/SearchPage.js":"13","/home/dev/Downloads/Twister-master/client/src/Composants/Header.js":"14","/home/dev/Downloads/Twister-master/client/src/Composants/Messages.js":"15","/home/dev/Downloads/Twister-master/client/src/Composants/PostMessage.js":"16","/home/dev/Downloads/Twister-master/client/src/Composants/ListFriend.js":"17","/home/dev/Downloads/Twister-master/client/src/Composants/ProfileHeader.js":"18","/home/dev/Downloads/Twister-master/client/src/Composants/Stat.js":"19","/home/dev/Downloads/Twister-master/client/src/Composants/ListSearch.js":"20","/home/dev/Downloads/Twister-master/client/src/Composants/Search.js":"21","/home/dev/Downloads/Twister-master/client/src/Composants/PostRespond.js":"22","/home/dev/Downloads/Twister-master/client/src/Composants/ItemFriend.js":"23","/home/dev/Downloads/Twister-master/client/src/Composants/ListApprove.js":"24","/home/dev/Downloads/Twister-master/client/src/Composants/Comments.js":"25","/home/dev/Downloads/Twister-master/client/src/Composants/ItemApprove.js":"26"},{"size":474,"mtime":1579611594000,"results":"27","hashOfConfig":"28"},{"size":5737,"mtime":1579611594000,"results":"29","hashOfConfig":"28"},{"size":6489,"mtime":1610477451612,"results":"30","hashOfConfig":"28"},{"size":6785,"mtime":1579611594000,"results":"31","hashOfConfig":"28"},{"size":2689,"mtime":1579611594000,"results":"32","hashOfConfig":"28"},{"size":4088,"mtime":1610477373695,"results":"33","hashOfConfig":"28"},{"size":3466,"mtime":1579611594000,"results":"34","hashOfConfig":"28"},{"size":3118,"mtime":1579611594000,"results":"35","hashOfConfig":"28"},{"size":12008,"mtime":1610477366359,"results":"36","hashOfConfig":"28"},{"size":590,"mtime":1579611594000,"results":"37","hashOfConfig":"28"},{"size":4863,"mtime":1579611594000,"results":"38","hashOfConfig":"28"},{"size":4742,"mtime":1579611594000,"results":"39","hashOfConfig":"28"},{"size":2509,"mtime":1579611594000,"results":"40","hashOfConfig":"28"},{"size":1689,"mtime":1610477892662,"results":"41","hashOfConfig":"28"},{"size":10998,"mtime":1579611594000,"results":"42","hashOfConfig":"28"},{"size":2786,"mtime":1579611594000,"results":"43","hashOfConfig":"28"},{"size":2866,"mtime":1579611594000,"results":"44","hashOfConfig":"28"},{"size":1524,"mtime":1610478316632,"results":"45","hashOfConfig":"28"},{"size":4443,"mtime":1579611594000,"results":"46","hashOfConfig":"28"},{"size":1293,"mtime":1579611594000,"results":"47","hashOfConfig":"28"},{"size":1574,"mtime":1579611594000,"results":"48","hashOfConfig":"28"},{"size":1664,"mtime":1579611594000,"results":"49","hashOfConfig":"28"},{"size":1483,"mtime":1579611594000,"results":"50","hashOfConfig":"28"},{"size":1599,"mtime":1579611594000,"results":"51","hashOfConfig":"28"},{"size":8645,"mtime":1579611594000,"results":"52","hashOfConfig":"28"},{"size":2929,"mtime":1579611594000,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1eue2bc",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"56"},"/home/dev/Downloads/Twister-master/client/src/index.js",[],["118","119"],"/home/dev/Downloads/Twister-master/client/src/serviceWorker.js",[],"/home/dev/Downloads/Twister-master/client/src/MainPage.js",[],"/home/dev/Downloads/Twister-master/client/src/Navigation.js",[],"/home/dev/Downloads/Twister-master/client/src/Accueil.js",[],"/home/dev/Downloads/Twister-master/client/src/Authentification.js",[],"/home/dev/Downloads/Twister-master/client/src/MyProfile.js",[],"/home/dev/Downloads/Twister-master/client/src/Forgot.js",["120","121","122","123"],"import React, {Component} from \"react\";\nimport axios from 'axios'\nimport logo from './res/logo.png'\n\nexport default class Forgot extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            errors: {},\n\n        }\n    }\n\n    sendRequest() {\n\n\n        if (this.handleValidation()) {\n            const formData = new URLSearchParams();\n            formData.append('email', this.inputEmail.value);\n\n            axios.get(\"http://localhost:8080/TwisterFinal/Reset?\" + formData);\n            this.props.forgotSuccess()\n        }\n\n    }\n\n    handleValidation() {\n        let errors = {};\n        let formIsValid = true;\n\n        //Email\n        if (this.inputEmail.value === \"\") {\n            formIsValid = false;\n            errors[\"email\"] = \"Email: Cannot be empty\";\n        }\n        else {\n            let lastAtPos = this.inputEmail.value.lastIndexOf('@');\n            let lastDotPos = this.inputEmail.value.lastIndexOf('.');\n\n            if (!(lastAtPos < lastDotPos && lastAtPos > 0 && this.inputEmail.value.indexOf('@@') == -1 && lastDotPos > 2 && (this.inputEmail.value.length - lastDotPos) > 2)) {\n                formIsValid = false;\n                errors[\"email\"] = \"Email: Is not valid\";\n            }\n        }\n\n        this.setState({errors: errors});\n        return formIsValid;\n    };\n\n    render() {\n        return (\n            <div className=\"Forgot\">\n                <div className=\"input_container\">\n                    <div className=\"logos\">\n                        <a>\n                            <img src={logo} onClick={() => this.props.signin()} alt=\"\"/>\n                        </a>\n                    </div>\n                    <div>\n                        <span className=\"errors\">{this.state.errors[\"email\"]}</span>\n\n                        <input\n                            onKeyPress={\n                                event => {\n                                    if (event.key === \"Enter\")\n                                        this.sendRequest();\n                                }\n                            }\n                            ref={(inputEmail) => {\n                                this.inputEmail = inputEmail\n                            }}\n                            type=\"text\" name=\"login\" placeholder=\"Adresse e-mail\"/>\n\n                    </div>\n                    <div>\n                        <input type=\"submit\" name=\"connexion\" value=\"Suivant\" className=\"myButton\"\n                               onClick={() => this.sendRequest()}/>\n                        <div className=\"links\">\n                            <a onClick={() => this.props.signin()}>Revenir à\n                                l'authentification</a>\n                            <div id=\"link3\" className=\"link\">\n                                <a className=\"ChangePasswordLink\" onClick={() => this.props.changePassword()}>Changer de\n                                    mot de passe</a>\n                            </div>\n\n                        </div>\n\n                    </div>\n                </div>\n\n\n            </div>\n\n\n        );\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Register.js",["124","125","126"],"/home/dev/Downloads/Twister-master/client/src/Success.js",["127","128"],"import React, {Component} from \"react\";\n\nexport default class Success extends Component {\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return (\n            <div className=\"SuccessForgot\">\n                <div className=\"input_container\">\n                    <div>{this.props.message}</div>\n                    <div className=\"links\">\n                        <a onClick={() => this.props.signin()}>Revenir à\n                            l'authentification</a>\n\n                    </div>\n\n                </div>\n\n\n            </div>\n\n\n        );\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/ShowProfile.js",[],"/home/dev/Downloads/Twister-master/client/src/ChangePassword.js",["129","130"],"import React, {Component} from \"react\";\nimport axios from 'axios'\nimport logo from './res/logo.png'\n\nexport default class ChangePassword extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            errors: {},\n            text: true\n        }\n\n\n    }\n\n    sendRequest() {\n        if (this.handleValidation()) {\n            const params = new URLSearchParams();\n            params.append('login', this.inputLogin.value);\n            params.append('password', this.inputPassword.value);\n            params.append('newPassword', this.inputNewPassword.value);\n\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Reset\", params)\n                .then(res => {\n                    if (res.data.code === undefined)\n                        this.props.resetSuccess();\n                    else {\n                        let errors = {};\n                        errors[\"serverError\"] = res.data.message;\n                        this.setState({\n                            errors: errors\n                        })\n                    }\n\n                });\n        }\n        console.log(this.state.errors)\n\n\n    }\n\n\n    handleValidation() {\n        let errors = {};\n        let formIsValid = true;\n\n        //login\n        if (this.inputLogin.value === \"\") {\n            formIsValid = false;\n            errors[\"login\"] = \"Login: Cannot be empty\";\n        }\n\n\n        //password\n        if (this.inputPassword.value === \"\") {\n            formIsValid = false;\n            errors[\"password\"] = \"Password: Cannot be empty\";\n        }\n\n\n        //password\n        if (this.inputNewPassword.value === \"\") {\n            formIsValid = false;\n            errors[\"newPassword\"] = \"Password: Cannot be empty\";\n        }\n        else if (this.inputNewPassword.value.length < 5) {\n            this.inputNewPassword.value = \"\";\n            formIsValid = false;\n            errors[\"newPassword\"] = \"Password: Too short, the minimum is 6 letters\";\n        }\n\n\n        this.setState({errors: errors});\n        return formIsValid;\n    };\n\n\n    render() {\n\n        return (\n            <div className=\"input_container\">\n                <div className=\"logos\">\n                    <a>\n                        <img src={logo} onClick={() => this.props.signin()} alt=\"\"/>\n                    </a>\n                </div>\n                <div className=\"register\">\n                    <span className=\"errors\">{this.state.errors[\"serverError\"]}</span>\n\n                    <span className=\"errors\">{this.state.errors[\"login\"]}</span>\n\n                    <input\n                        onKeyPress={\n                            event => {\n                                if (event.key === \"Enter\")\n                                    this.sendRequest();\n                            }\n                        }\n                        ref={(inputLogin) => {\n                            this.inputLogin = inputLogin\n                        }}\n                        type=\"text\" name=\"login\" placeholder=\"Login ou adresse e-mail\"/>\n\n                    <span className=\"errors\">{this.state.errors[\"password\"]}</span>\n\n                    <input\n                        onKeyPress={\n                            event => {\n                                if (event.key === \"Enter\")\n                                    this.sendRequest();\n                            }\n                        }\n                        ref={(inputPassword) => {\n                            this.inputPassword = inputPassword\n                        }}\n                        type=\"password\" name=\"pass\" placeholder=\"Ancien mot de passe\"/>\n\n\n                    <span className=\"errors\">{this.state.errors[\"newPassword\"]}</span>\n\n                    <input\n                        onKeyPress={\n                            event => {\n                                if (event.key === \"Enter\")\n                                    this.sendRequest();\n                            }\n                        }\n                        ref={(inputNewPassword) => {\n                            this.inputNewPassword = inputNewPassword\n                        }}\n                        type=\"password\" name=\"pass\" placeholder=\"Nouveau mot de passe\"/>\n\n\n                    <div>\n                        <input type=\"submit\" name=\"inscription\" value=\"Suivant\" className=\"myButton\"\n                               onClick={() => this.sendRequest()}/>\n\n                        <div className=\"links\">\n                            <a onClick={() => this.props.signin()}>Revenir à\n                                l'authentification ? </a>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/SearchPage.js",[],"/home/dev/Downloads/Twister-master/client/src/Composants/Header.js",["131","132","133","134"],"/home/dev/Downloads/Twister-master/client/src/Composants/Messages.js",["135","136","137","138","139","140","141","142","143","144","145"],"import React, {Component} from \"react\";\nimport PostRespond from \"./PostRespond\";\nimport Comments from \"./Comments\";\nimport '../Styles/Articles.css'\nimport profile from '../res/profile.png'\nimport {read_cookie} from \"sfcookies\";\nimport axios from 'axios'\n\nexport function timeSince(time) {\n\n\n    switch (typeof time) {\n        case 'number':\n            break;\n        case 'string':\n            time = +new Date(time);\n            break;\n        case 'object':\n            if (time.constructor === Date) time = time.getTime();\n            break;\n        default:\n            time = +new Date();\n    }\n    const time_formats = [\n        [60, 'secondes', 1],\n        [120, 'une minute'],\n        [3600, 'minutes', 60],\n        [7200, 'une heure'],\n        [86400, 'heures', 3600],\n        [172800, 'un jour'],\n        [604800, 'jours', 86400],\n        [1209600, 'semaine'],\n        [2419200, 'semaines', 604800],\n        [4838400, 'un mois'],\n        [29030400, 'mois', 2419200],\n        [58060800, 'un an'],\n        [2903040000, 'ans', 29030400],\n\n    ];\n    const seconds = (+new Date() - time) / 1000,\n        token = 'il y a ',\n        list_choice = 1;\n\n    if (seconds < 5) {\n        return 'Maintenant'\n    }\n\n    let i = 0,\n        format;\n    while (format = time_formats[i++])\n        if (seconds < format[0]) {\n            if (typeof format[2] !== 'number')\n                return token + format[list_choice];\n            else\n                return token + Math.floor(seconds / format[2]) + ' ' + format[1];\n        }\n    return time;\n\n}\n\nexport default class Messages extends Component {\n\n    constructor(props) {\n        super(props);\n\n\n        let articles = [];\n\n        if (this.props.listComment !== undefined) {\n            articles = this.props.listComment;\n        }\n\n        this.state = {\n            date: this.props.date,\n            idUser: this.props.idUser,\n            id: this.props.id,\n            publication: this.props.publication,\n            file: null,\n            writeComment: false,\n            likeUsers: [],\n            likes: this.props.likes,\n            liked: this.props.likes ? this.props.likes.some(idLike => idLike === this.props.idUser) : false,\n            showComments: false,\n            articles: articles\n        }\n\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.listComment !== undefined) {\n            this.setState({\n                articles: nextProps.listComment\n            });\n        }\n        this.setState({\n            idUser: nextProps.idUser,\n            id: nextProps.id,\n            date: nextProps.date,\n        })\n\n    }\n\n\n    onError() {\n        this.setState({\n            image: profile\n        })\n    }\n\n    componentDidMount() {\n        const params = new URLSearchParams();\n        params.append('key', read_cookie(\"key\"));\n        params.append('id', this.props.id);\n\n        axios.get(\"http://localhost:8080/TwisterFinal/Image?\" + params)\n            .then(res => {\n                this.setState({\n                    image: res.data\n                })\n            });\n        this.getLikesUsers();\n    }\n\n\n    doLike() {\n        if (!this.state.liked) {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idMessage', this.props.messageId);\n            params.append('op', \"like\");\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", params)\n                .then(res => {\n                    if (res.data.state === \"OK\") {\n                        const array = this.state.likes;\n                        const index = array.indexOf(this.props.idUser);\n                        if (index === -1) {\n                            array.push(this.props.idUser);\n                            this.setState({\n                                likes: array,\n                                liked: !this.state.liked\n                            });\n                        }\n                        this.getLikesUsers()\n                    }\n                });\n        }\n        else {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idMessage', this.props.messageId);\n            params.append('op', \"dislike\");\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", params)\n                .then(res => {\n                    console.log(res.data.state);\n                    if (res.data.state === \"OK\") {\n                        const array = this.state.likes;\n                        const index = array.indexOf(this.props.idUser);\n                        if (index !== -1) {\n                            array.splice(index, 1);\n                            this.setState({\n                                likes: array,\n                                liked: !this.state.liked\n                            });\n                        }\n                        this.getLikesUsers()\n\n                    }\n                });\n        }\n    }\n\n    removeMessage() {\n        if (this.state.idUser === this.state.id) {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idMessage', this.props.messageId);\n            params.append('op', \"del\");\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", params)\n                .then(res => {\n                    if (res.data.state === \"OK\") {\n                        this.props.reload();\n                    }\n                });\n        }\n\n    }\n\n    getLikesUsers() {\n        this.setState({likeUsers: []});\n        this.state.likes.map((id) => {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idUser', id);\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Login\", params)\n                .then(res => {\n                    const Array = this.state.likeUsers;\n                    Array.push(res.data);\n                    this.setState({likeUsers: Array})\n                })\n        })\n    }\n\n    render() {\n\n\n        return (<div className=\"Articles\">\n\n                {\n                    this.state.idUser === this.state.id &&\n                    <a className=\"close\" onClick={() => this.removeMessage()}>✕</a>\n                }\n                <div className=\"infos\">\n                    <a\n                        onClick={() => this.props.getuserprofile(this.props.id, this.props.login, this.props.name, this.props.lastname)}>\n                        <img className=\"profile\" onError={this.onError.bind(this)} src={this.state.image}/>\n                    </a>\n\n                    <a className=\"name\"\n                       onClick={() => this.props.getuserprofile(this.props.id, this.props.login, this.props.name, this.props.lastname)}>\n\n                        {this.props.name} {this.props.lastname}\n                    </a>\n\n                    <div className=\"username\">\n                        @{this.props.login} •\n                        <label className=\"date\">\n                            {timeSince(new Date(this.state.date))}\n                        </label>\n                    </div>\n\n                </div>\n                <div className=\"content\">\n                    {this.props.content}\n                </div>\n                {\n                    this.state.publication &&\n                    <div className=\"photo\">\n                        <a href={this.state.publication}><img src={this.state.publication} alt=\"\"/></a>\n                    </div>\n                }\n\n                <div className=\"Reaction\">\n                    <a onClick={() => this.doLike()}\n                       className=\"inlined\">{this.state.liked ? \"Je n'aime plus\" : \"J'aime\"}</a>\n                    <a\n                        onClick={() => this.setState({writeComment: !this.state.writeComment})}\n                        className=\"inlined\">Commenter</a>\n\n                    <a className=\"showComments\"\n                       onClick={() => this.setState({showComments: !this.state.showComments})}>\n                        {this.state.articles.length > 0 && this.state.articles.length + ' Commentaire(s)'}\n                    </a>\n                    <br/>\n\n\n                    {\n                        <div className=\"dropdown\">\n                            {\n                                this.state.likes.length > 0 &&\n                                <a className=\"dropbtn\"\n                                   onClick={() => this.setState({showList: !this.state.showList})}> {this.state.likes.length + ' Like(s)'}</a>\n\n                            }\n                            {\n                                this.state.showList &&\n\n                                <div className=\"dropdown-content\">\n                                    {\n\n                                        this.state.likeUsers.map((user) =>\n                                            <a\n                                                className=\"name\"\n                                                onClick={() => this.props.getuserprofile(user.user, user.login, user.nom, user.prenom)}\n                                            >\n                                                {user.prenom} {user.nom}\n                                            </a>)\n\n                                    }\n\n                                </div>\n                            }\n\n                        </div>\n                    }\n\n\n                </div>\n\n\n                {\n                    this.state.showComments && this.state.articles.length > 0 &&\n                    <div className=\"Comments\">\n                        {this.state.articles.map((article) => (\n                            <Comments\n                                date={article.date}\n                                idUser={this.props.idUser}\n                                getuserprofile={this.props.getuserprofile}\n                                parentId={this.props.messageId}\n                                name={article.author.prenom}\n                                id={article.author.user_id}\n                                lastname={article.author.nom}\n                                login={article.author.login}\n                                content={article.message}\n                                listComment={article.comments}\n                                messageId={article.message_id}\n                                likes={article.likes}\n                                key={article.message_id}\n                                reload={this.props.reload}\n                            />\n                        ))}\n                    </div>\n                }\n                {\n                    this.state.writeComment &&\n                    <PostRespond reload={this.props.reload} parentId={this.props.messageId} parentCom={this}/>\n                }\n            </div>\n        );\n\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Composants/PostMessage.js",["146","147"],"import React, {Component} from \"react\";\nimport \"../Styles/PostMessage.css\"\nimport axios from 'axios'\nimport {read_cookie} from \"sfcookies\";\nimport addpicture from \"../res/picture.jpg\"\n\nexport default class PostMessage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            publication: null,\n            file: null\n        }\n    }\n\n    postTwist() {\n\n        if (this.inputContent.textContent !== \"\") {\n\n\n            const formData = new URLSearchParams();\n            formData.append('key', read_cookie(\"key\"));\n            formData.append('content', this.inputContent.textContent);\n            formData.append('op', \"message\");\n            if (this.state.publication !== null)\n                formData.append('photo', this.state.publication);\n\n\n            this.inputContent.textContent = \"\";\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", formData)\n                .then(() => {\n                    if (this.props.reload !== undefined) {\n                        this.props.reload();\n                    }\n                    this.setState({\n                        publication: null,\n                        file: null\n                    })\n                });\n\n\n        }\n\n\n    }\n\n    onChange(event) {\n        this.setState({\n            file: event.target.files[0]\n        });\n        if (event.target.files && event.target.files[0]) {\n            let reader = new FileReader();\n            reader.onload = (e) => {\n\n                this.setState({\n                    publication: e.target.result\n                });\n            };\n            reader.readAsDataURL(event.target.files[0]);\n        }\n\n    }\n\n\n    render() {\n        return (<div className=\"PostMessage\">\n            <div className=\"labels\">\n                Postez un message\n            </div>\n            {\n                this.state.publication &&\n                <div className=\"photo\">\n                    <a><img src={this.state.publication} alt=\"\"/></a>\n                </div>\n            }\n            <div onKeyPress={\n                event => {\n                    if (event.key === \"Enter\")\n                        this.postTwist();\n                }\n            }\n                 ref={(inputContent) => {\n                     this.inputContent = inputContent\n                 }}\n                 contentEditable=\"true\" className=\"newMessage\"/>\n            <label htmlFor=\"uploader\" className=\"pictureUpload\"><img src={addpicture}/></label>\n            <input className=\"input-file\" id=\"uploader\" type=\"file\" name=\"myImage\" accept=\"image/*\"\n                   onChange={(e) => this.onChange(e)}/>\n            <input type=\"submit\" className=\"myButton\" value=\"Publier\" onClick={() => this.postTwist()}/>\n        </div>);\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Composants/ListFriend.js",[],"/home/dev/Downloads/Twister-master/client/src/Composants/ProfileHeader.js",[],"/home/dev/Downloads/Twister-master/client/src/Composants/Stat.js",["148","149","150"],"import React, {Component} from \"react\";\nimport '../Styles/Stat.css'\nimport {read_cookie} from \"sfcookies\";\nimport axios from 'axios'\nimport ListApprove from \"./ListApprove\";\n\nexport default class Stat extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            twist: this.props.twists,\n            followers: null,\n            following: null,\n            isFriend: true,\n            isRequested: false\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            twist: nextProps.twists,\n            isFriend: nextProps.isFriend,\n            isRequested: nextProps.isRequested\n        })\n\n    }\n\n    componentDidMount() {\n        const params1 = new URLSearchParams();\n\n        params1.append('key', read_cookie(\"key\"));\n        params1.append('op', \"follower\");\n\n        axios.get(\"http://localhost:8080/TwisterFinal/Friends?\" + params1)\n            .then(res => {\n                this.setState(() => {\n                    return {followers: res.data.Array};\n                });\n\n            });\n\n\n        const params2 = new URLSearchParams();\n\n        params2.append('key', read_cookie(\"key\"));\n        params2.append('op', \"following\");\n\n        axios.get(\"http://localhost:8080/TwisterFinal/Friends?\" + params2)\n            .then(res => {\n                this.setState(() => {\n                    return {following: res.data.Array};\n                });\n\n            });\n\n\n        if (this.props.idShow !== undefined) {\n            const params3 = new URLSearchParams();\n\n            params3.append('key', read_cookie(\"key\"));\n            params3.append('op', \"requested\");\n            params3.append('id', this.props.idShow);\n\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Friends?\", params3)\n                .then(res => {\n                    this.setState({\n                        isFriend: res.data.isFriend,\n                        isRequested: res.data.isRequested\n\n                    });\n                });\n        }\n\n    }\n\n\n    sendRequest() {\n        const params = new URLSearchParams();\n\n        params.append('key', read_cookie(\"key\"));\n        params.append('op', \"req\");\n        params.append('id', this.props.idShow);\n\n        axios.post(\"http://localhost:8080/TwisterFinal/Friends?\", params)\n            .then(() => {\n                this.setState({\n                    isRequested: true\n                });\n\n            });\n    }\n\n    removeFriend() {\n        const params = new URLSearchParams();\n\n        params.append('key', read_cookie(\"key\"));\n        params.append('id', this.props.idShow);\n        params.append('op', \"del\");\n\n\n        axios.post(\"http://localhost:8080/TwisterFinal/Friends?\", params)\n            .then(() => {\n                this.setState({\n                    isFriend: false\n                });\n            });\n    }\n\n    getRequestSection() {\n        if (this.props.getuserprofile !== undefined) {\n            return <ListApprove getuserprofile={this.props.getuserprofile}/>\n\n        }\n        else {\n            if (!this.state.isFriend) {\n                if (!this.state.isRequested) {\n                    return <div className=\"sendRequest\">\n                        <a onClick={() => this.sendRequest()}>Suivre ce profil</a>\n                    </div>\n                }\n                else {\n                    return <div className=\"sendRequest\">\n                        <a>Demande envoyé</a>\n                    </div>\n                }\n            }\n            else {\n                return <div className=\"sendRequest\">\n                    <a onClick={() => this.removeFriend()}>Se désabonner</a>\n                </div>\n            }\n        }\n\n    }\n\n    render() {\n\n\n        return (<div className=\"Stat\">\n            <div className=\"head\"> Statistiques</div>\n\n            <div className=\"twist\">\n                Nombre de twists: {this.state.twist}\n            </div>\n            {\n                this.state.followers &&\n                <div className=\"follower\">\n                    Nombre d'abonnés: {this.state.followers.length}\n                </div>\n            }\n            {\n                this.state.following &&\n                <div className=\"following\">\n                    Nombre d'abonnements: {this.state.following.length}\n                </div>\n\n            }\n\n            {\n                this.getRequestSection()\n            }\n\n        </div>);\n\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Composants/ListSearch.js",[],"/home/dev/Downloads/Twister-master/client/src/Composants/Search.js",["151"],"import React, {Component} from \"react\";\nimport \"../Styles/Recherche.css\"\nimport {read_cookie} from \"sfcookies\";\nimport axios from 'axios'\n\nexport default class Search extends Component {\n\n    constructor(props) {\n        super(props);\n\n\n    }\n\n    handleSearch() {\n        if (!(this.inputSearch.value === \"\")) {\n            const params1 = new URLSearchParams();\n\n            params1.append('key', read_cookie(\"key\"));\n            params1.append('query', this.inputSearch.value);\n            axios.post(\"http://localhost:8080/TwisterFinal/Search?\", params1)\n                .then(res => {\n                    this.inputSearch.value = \"\";\n                    this.props.doSearch(res.data[1].Users, res.data[0].Messages[0])\n                });\n\n        }\n    }\n\n\n    render() {\n\n        return (\n\n            <div className=\"Recherche\">\n                <div className=\"inlined\">\n                    <input\n                        onKeyPress={event => {\n                            if (event.key === \"Enter\")\n                                this.handleSearch();\n\n                        }\n                        }\n\n                        ref={(inputSearch) => {\n                            this.inputSearch = inputSearch\n                        }}\n                        type=\"text\" className=\"search\"/>\n                </div>\n                <div className=\"inlined\">\n                    <input type=\"submit\" className=\"myButton\" value=\"Search\" onClick={() => this.handleSearch()\n                    }/>\n\n                </div>\n            </div>\n\n\n        );\n\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Composants/PostRespond.js",["152"],"import React, {Component} from \"react\";\nimport \"../Styles/RespondItem.css\"\nimport axios from 'axios'\nimport {read_cookie} from \"sfcookies\";\n\nexport default class PostRespond extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    postComment() {\n        if (this.inputContent.textContent !== \"\") {\n            const params = new URLSearchParams();\n\n            params.append('key', read_cookie(\"key\"));\n            params.append('content', this.inputContent.textContent);\n            params.append('op', \"comment\");\n            params.append('idMessage', this.props.parentId);\n\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", params)\n                .then(() => {\n                    this.inputContent.textContent = \"\";\n\n                    if (this.props.reload !== undefined) {\n                        this.props.parentCom.setState({\n                            writeComment: false,\n                            showComments: true\n                        });\n                        this.props.reload();\n                    }\n                });\n        }\n    }\n\n    render() {\n        return (<div className=\"RespondItem\">\n            <div onKeyPress={\n                event => {\n                    if (event.key === \"Enter\")\n                        this.postComment();\n                }\n            }\n                 ref={(inputContent) => {\n                     this.inputContent = inputContent\n                 }}\n                 contentEditable=\"true\" className=\"newMessage\"/>\n            <input type=\"submit\" className=\"myButton\" value=\"Send\" onClick={() => this.postComment()}/>\n        </div>);\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Composants/ItemFriend.js",["153","154"],"import React, {Component} from \"react\";\nimport '../Styles/Articles.css'\nimport profile from '../res/profile.png'\nimport '../Styles/Amis.css'\nimport {read_cookie} from \"sfcookies\";\nimport axios from 'axios'\n\nexport default class ItemFriend extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            image: profile\n        }\n\n    }\n\n\n    onError() {\n        this.setState({\n            image: profile\n        })\n    }\n\n    componentDidMount() {\n        const params = new URLSearchParams();\n        params.append('key', read_cookie(\"key\"));\n        params.append('id', this.props.id);\n\n        axios.get(\"http://localhost:8080/TwisterFinal/Image?\" + params)\n            .then(res => {\n                this.setState({\n                    image: res.data\n                })\n            });\n    }\n\n\n    render() {\n\n\n        return (<div className=\"Amis\"\n                     onClick={() => this.props.getuserprofile(this.props.id, this.props.login, this.props.nom, this.props.prenom)}>\n                <div className=\"photo\">\n                    <a>\n                        <img className=\"profile\" onError={this.onError.bind(this)} src={this.state.image}/>\n                    </a>\n\n                </div>\n                <div className=\"infos\">\n                    <div className=\"name\">\n                        {this.props.prenom} {this.props.nom}\n                    </div>\n\n                </div>\n            </div>\n        );\n\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Composants/ListApprove.js",[],"/home/dev/Downloads/Twister-master/client/src/Composants/Comments.js",["155","156","157","158","159","160","161","162","163","164","165"],"import React, {Component} from \"react\";\nimport PostRespond from \"./PostRespond\";\nimport '../Styles/Comment.css'\nimport profile from '../res/profile.png'\nimport {read_cookie} from \"sfcookies\";\nimport axios from 'axios'\nimport {timeSince} from \"./Messages\";\n\nexport default class Comments extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let comments = [];\n\n        if (this.props.listComment !== undefined) {\n            comments = this.props.listComment;\n        }\n        this.state = {\n            date: this.props.date,\n            idUser: this.props.idUser,\n            id: this.props.id,\n            file: null,\n            writeComment: false,\n            likes: this.props.likes ? this.props.likes : [],\n            likeUsers: [],\n            liked: this.props.likes ? this.props.likes.some(idLike => idLike === this.props.idUser) : false,\n            comments: comments,\n            showComments: false\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n\n        if (this.props.listComment !== undefined) {\n            this.setState({\n                comments: nextProps.listComment\n            });\n        }\n        this.setState({\n            idUser: nextProps.idUser,\n            id: nextProps.id,\n            date: nextProps.date,\n\n        })\n\n    }\n\n    componentDidMount() {\n        const params = new URLSearchParams();\n        params.append('key', read_cookie(\"key\"));\n        params.append('id', this.props.id);\n\n        axios.get(\"http://localhost:8080/TwisterFinal/Image?\" + params)\n            .then(res => {\n                this.setState({\n                    image: res.data\n                })\n            });\n        this.getLikesUsers();\n\n    }\n\n    onError() {\n        this.setState({\n            image: profile\n        })\n    }\n\n    getLikesUsers() {\n        this.setState({likeUsers: []});\n        this.state.likes.map((id) => {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idUser', id);\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Login\", params)\n                .then(res => {\n                    const Array = this.state.likeUsers;\n                    Array.push(res.data);\n                    this.setState({likeUsers: Array})\n                })\n        })\n    }\n\n    doLike() {\n        if (!this.state.liked) {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idMessage', this.props.messageId);\n            params.append('op', \"like\");\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", params)\n                .then(res => {\n                    console.log(res.data.state);\n                    if (res.data.state === \"OK\") {\n                        const array = this.state.likes;\n                        const index = array.indexOf(this.props.idUser);\n                        if (index === -1) {\n                            array.push(this.props.idUser);\n                            this.setState({\n                                likes: array,\n                                liked: !this.state.liked\n                            });\n                        }\n                        this.getLikesUsers()\n\n                    }\n                });\n        }\n        else {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idMessage', this.props.messageId);\n            params.append('op', \"dislike\");\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", params)\n                .then(res => {\n                    if (res.data.state === \"OK\") {\n                        const array = this.state.likes;\n                        const index = array.indexOf(this.props.idUser);\n                        if (index !== -1) {\n                            array.splice(index, 1);\n                            this.setState({\n                                likes: array,\n                                liked: !this.state.liked\n                            });\n                        }\n\n                    }\n                    this.getLikesUsers()\n\n                });\n        }\n    }\n\n    removeMessage() {\n        if (this.state.idUser === this.state.id) {\n            const params = new URLSearchParams();\n            params.append('key', read_cookie(\"key\"));\n            params.append('idMessage', this.props.messageId);\n            params.append('op', \"del\");\n\n            axios.post(\"http://localhost:8080/TwisterFinal/Messages\", params)\n                .then(res => {\n                    if (res.data.state === \"OK\") {\n                        this.props.reload();\n                    }\n                });\n        }\n\n    }\n\n    render() {\n        return (<div className=\"Comment\">\n            {\n                this.state.idUser === this.state.id &&\n                <a className=\"close\" onClick={() => this.removeMessage()}>✕</a>\n            }\n\n            <div className=\"infos\">\n                <a\n                    onClick={() => this.props.getuserprofile(this.props.id, this.props.login, this.props.name, this.props.lastname)}>\n                    <img onError={this.onError.bind(this)} src={this.state.image}/>\n                </a>\n\n                <a className=\"name\"\n                   onClick={() => this.props.getuserprofile(this.props.id, this.props.login, this.props.name, this.props.lastname)}>\n                    {this.props.name} {this.props.lastname}\n                </a>\n\n                <div className=\"username\">\n                    @{this.props.login} •\n                    <a className=\"date\">\n\n                        {timeSince(new Date(this.state.date))}\n                    </a>\n                </div>\n            </div>\n            <div className=\"content\">\n                {this.props.content}\n            </div>\n            <div className=\"Reaction\">\n                <a onClick={() => this.doLike()}\n                   className=\"inlined\">{this.state.liked ? \"Je n'aime plus\" : \"J'aime\"}</a>\n                <a\n                    onClick={() => this.setState({writeComment: !this.state.writeComment})}\n                    className=\"inlined\">Commenter</a>\n\n                <a className=\"showComments\"\n                   onClick={() => this.setState({showComments: !this.state.showComments})}>\n                    {this.state.comments.length > 0 && this.state.comments.length + ' Commentaire(s)'}\n                </a>\n\n                {\n                    <div className=\"dropdown\">\n                        {\n                            this.state.likes.length > 0 &&\n                            <a className=\"dropbtn\"\n                               onClick={() => this.setState({showList: !this.state.showList})}> {this.state.likes.length + ' Like(s)'}</a>\n\n                        }\n                        {\n                            this.state.showList &&\n\n                            <div className=\"dropdown-content\">\n                                {\n                                    this.state.likeUsers.map((user) => <a>{user.nom} {user.prenom}</a>)\n\n                                }\n\n                            </div>\n                        }\n\n                    </div>\n                }\n\n\n            </div>\n\n            {\n                this.state.showComments && this.state.comments.length > 0 &&\n                <div className=\"Comments\">\n                    {this.state.comments.map((article) => (\n                        <Comments\n                            date={article.date}\n                            idUser={this.props.idUser}\n                            getuserprofile={this.props.getuserprofile}\n                            parentId={this.props.messageId}\n                            name={article.author.prenom}\n                            id={article.author.user_id}\n                            lastname={article.author.nom}\n                            login={article.author.login}\n                            content={article.message}\n                            listComment={article.comments}\n                            messageId={article.message_id}\n                            likes={article.likes}\n                            key={article.message_id}\n                            reload={this.props.reload}\n\n                        />\n                    ))}\n                </div>\n            }\n\n            {this.state.writeComment &&\n            <PostRespond reload={this.props.reload} parentId={this.props.messageId}\n                         parentCom={this}/>}\n\n        </div>);\n\n\n    }\n\n\n}\n","/home/dev/Downloads/Twister-master/client/src/Composants/ItemApprove.js",["166","167","168","169"],"import React, {Component} from \"react\";\nimport '../Styles/Articles.css'\nimport profile from '../res/profile.png'\nimport '../Styles/Amis.css'\nimport {read_cookie} from \"sfcookies\";\nimport axios from 'axios'\n\nexport default class ItemApprove extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            clicked: false,\n            image: profile\n        }\n\n    }\n\n\n    onError() {\n        this.setState({\n            image: profile\n        })\n    }\n\n    componentDidMount() {\n        const params = new URLSearchParams();\n        params.append('key', read_cookie(\"key\"));\n        params.append('id', this.props.id);\n\n        axios.get(\"http://localhost:8080/TwisterFinal/Image?\" + params)\n            .then(res => {\n                this.setState({\n                    image: res.data\n                })\n            });\n    }\n\n\n    disapprove() {\n\n\n        const params1 = new URLSearchParams();\n\n        params1.append('key', read_cookie(\"key\"));\n        params1.append('op', \"dis\");\n        params1.append('id', this.props.id);\n\n\n        axios.post(\"http://localhost:8080/TwisterFinal/Friends?\", params1)\n            .then(() => {\n                this.setState({\n                    clicked: true\n                });\n\n\n            });\n    }\n\n    approve() {\n        const params1 = new URLSearchParams();\n\n        params1.append('key', read_cookie(\"key\"));\n        params1.append('op', \"app\");\n        params1.append('id', this.props.id);\n\n\n        axios.post(\"http://localhost:8080/TwisterFinal/Friends?\", params1)\n            .then(() => {\n                this.setState({\n                    clicked: true\n                });\n\n            });\n    }\n\n    render() {\n\n\n        return (<div className=\"Approuve\">\n                <div\n                    onClick={() => this.props.getuserprofile(this.props.id, this.props.login, this.props.name, this.props.lastname)}\n                    className=\"photo\">\n                    <a>\n                        <img className=\"profile\" onError={this.onError.bind(this)} src={this.state.image}/>\n                    </a>\n\n                </div>\n                <div className=\"infos\">\n                    <div\n                        onClick={() => this.props.getuserprofile(this.props.id, this.props.login, this.props.name, this.props.lastname)}\n                        className=\"name\">\n                        {this.props.name} {this.props.lastname}\n                    </div>\n\n                </div>\n\n                {!this.state.clicked &&\n                <div className=\"approvement\">\n                    <a className=\"approve\" onClick={() => this.approve()}>\n                        Approve\n                    </a>\n                    <a className=\"disapprove\" onClick={() => this.disapprove()}>\n                        Disapprove\n                    </a>\n                </div>\n                }\n            </div>\n        );\n\n\n    }\n\n\n}\n",{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":41,"column":98,"nodeType":"176","messageId":"177","endLine":41,"endColumn":100},{"ruleId":"178","severity":1,"message":"179","line":56,"column":25,"nodeType":"180","endLine":56,"endColumn":28},{"ruleId":"178","severity":1,"message":"179","line":80,"column":29,"nodeType":"180","endLine":80,"endColumn":68},{"ruleId":"178","severity":1,"message":"179","line":83,"column":33,"nodeType":"180","endLine":83,"endColumn":111},{"ruleId":"174","severity":1,"message":"175","line":147,"column":98,"nodeType":"176","messageId":"177","endLine":147,"endColumn":100},{"ruleId":"178","severity":1,"message":"179","line":165,"column":21,"nodeType":"180","endLine":165,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":335,"column":25,"nodeType":"180","endLine":335,"endColumn":64},{"ruleId":"181","severity":1,"message":"182","line":5,"column":5,"nodeType":"183","messageId":"184","endLine":8,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":16,"column":25,"nodeType":"180","endLine":16,"endColumn":64},{"ruleId":"178","severity":1,"message":"179","line":86,"column":21,"nodeType":"180","endLine":86,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":142,"column":29,"nodeType":"180","endLine":142,"endColumn":68},{"ruleId":"185","severity":1,"message":"186","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":14},{"ruleId":"178","severity":1,"message":"179","line":61,"column":17,"nodeType":"180","endLine":61,"endColumn":60},{"ruleId":"178","severity":1,"message":"179","line":66,"column":17,"nodeType":"180","endLine":67,"endColumn":60},{"ruleId":"178","severity":1,"message":"179","line":68,"column":17,"nodeType":"180","endLine":68,"endColumn":54},{"ruleId":"189","severity":1,"message":"190","line":50,"column":12,"nodeType":"191","messageId":"192","endLine":50,"endColumn":38},{"ruleId":"193","severity":1,"message":"194","line":193,"column":35,"nodeType":"195","messageId":"196","endLine":193,"endColumn":37},{"ruleId":"178","severity":1,"message":"179","line":214,"column":21,"nodeType":"180","endLine":214,"endColumn":79},{"ruleId":"178","severity":1,"message":"179","line":217,"column":21,"nodeType":"180","endLine":218,"endColumn":138},{"ruleId":"197","severity":1,"message":"198","line":219,"column":25,"nodeType":"180","endLine":219,"endColumn":108},{"ruleId":"178","severity":1,"message":"179","line":222,"column":21,"nodeType":"180","endLine":223,"endColumn":137},{"ruleId":"178","severity":1,"message":"179","line":247,"column":21,"nodeType":"180","endLine":248,"endColumn":44},{"ruleId":"178","severity":1,"message":"179","line":249,"column":21,"nodeType":"180","endLine":251,"endColumn":45},{"ruleId":"178","severity":1,"message":"179","line":253,"column":21,"nodeType":"180","endLine":254,"endColumn":96},{"ruleId":"178","severity":1,"message":"179","line":264,"column":33,"nodeType":"180","endLine":265,"endColumn":100},{"ruleId":"178","severity":1,"message":"179","line":275,"column":45,"nodeType":"180","endLine":278,"endColumn":46},{"ruleId":"178","severity":1,"message":"179","line":75,"column":21,"nodeType":"180","endLine":75,"endColumn":24},{"ruleId":"197","severity":1,"message":"198","line":88,"column":65,"nodeType":"180","endLine":88,"endColumn":88},{"ruleId":"178","severity":1,"message":"179","line":121,"column":25,"nodeType":"180","endLine":121,"endColumn":63},{"ruleId":"178","severity":1,"message":"179","line":126,"column":25,"nodeType":"180","endLine":126,"endColumn":28},{"ruleId":"178","severity":1,"message":"179","line":132,"column":21,"nodeType":"180","endLine":132,"endColumn":60},{"ruleId":"181","severity":1,"message":"182","line":8,"column":5,"nodeType":"183","messageId":"184","endLine":12,"endColumn":6},{"ruleId":"181","severity":1,"message":"182","line":8,"column":5,"nodeType":"183","messageId":"184","endLine":10,"endColumn":6},{"ruleId":"178","severity":1,"message":"179","line":45,"column":21,"nodeType":"180","endLine":45,"endColumn":24},{"ruleId":"197","severity":1,"message":"198","line":46,"column":25,"nodeType":"180","endLine":46,"endColumn":108},{"ruleId":"193","severity":1,"message":"194","line":74,"column":35,"nodeType":"195","messageId":"196","endLine":74,"endColumn":37},{"ruleId":"178","severity":1,"message":"179","line":159,"column":17,"nodeType":"180","endLine":159,"endColumn":75},{"ruleId":"178","severity":1,"message":"179","line":163,"column":17,"nodeType":"180","endLine":164,"endColumn":134},{"ruleId":"197","severity":1,"message":"198","line":165,"column":21,"nodeType":"180","endLine":165,"endColumn":84},{"ruleId":"178","severity":1,"message":"179","line":168,"column":17,"nodeType":"180","endLine":169,"endColumn":133},{"ruleId":"178","severity":1,"message":"179","line":175,"column":21,"nodeType":"180","endLine":175,"endColumn":41},{"ruleId":"178","severity":1,"message":"179","line":185,"column":17,"nodeType":"180","endLine":186,"endColumn":40},{"ruleId":"178","severity":1,"message":"179","line":187,"column":17,"nodeType":"180","endLine":189,"endColumn":41},{"ruleId":"178","severity":1,"message":"179","line":191,"column":17,"nodeType":"180","endLine":192,"endColumn":92},{"ruleId":"178","severity":1,"message":"179","line":200,"column":29,"nodeType":"180","endLine":201,"endColumn":96},{"ruleId":"178","severity":1,"message":"179","line":209,"column":72,"nodeType":"180","endLine":209,"endColumn":75},{"ruleId":"178","severity":1,"message":"179","line":84,"column":21,"nodeType":"180","endLine":84,"endColumn":24},{"ruleId":"197","severity":1,"message":"198","line":85,"column":25,"nodeType":"180","endLine":85,"endColumn":108},{"ruleId":"178","severity":1,"message":"179","line":100,"column":21,"nodeType":"180","endLine":100,"endColumn":75},{"ruleId":"178","severity":1,"message":"179","line":103,"column":21,"nodeType":"180","endLine":103,"endColumn":81},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]